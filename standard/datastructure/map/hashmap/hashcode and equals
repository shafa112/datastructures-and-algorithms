Java Object class has equals and hashcode function

These functions are used in library internally like for list.contains(o) equals is used internally
similarly java.Object hashcode function is used in HashMap implementation in java.

But in some scenarios you have to override these methods, hashcode and equals
and in that cases you have to abide by the contract set by java which is mentioned in javadoc Object class.

Contract for hashcode as per javadoc

# The general contract of hashCode is:

1. Whenever it is invoked on the same object more than once during an execution of a Java application,
the hashCode method must consistently return the same integer, provided no information used in equals
comparisons on the object is modified. This integer need not remain consistent
from one execution of an application to another execution of the same application.

2. If two objects are equal according to the equals(Object) method,
then calling the hashCode method on each of the two objects must produce the same integer result.

3. It is not required that if two objects are unequal according to the equals(Object) method,
then calling the hashCode method on each of the two objects must produce distinct integer results.
However, the programmer should be aware that producing distinct integer results
for unequal objects may improve the performance of hash tables.

Extra info as per doc but not contract:
As much as is reasonably practical, the hashCode method defined by class
Object does return distinct integers for distinct objects. (The hashCode may or may not be implemented
as some function of an object's memory address at some point in time.)


# Java Object equals
public boolean equals(Object obj);

Indicates whether some other object is "equal to" this one

The equals method implements an equivalence relation on non-null object references:

1. It is reflexive: for any non-null reference value x, x.equals(x) should return true.

2. It is symmetric: for any non-null reference values x and y, x.equals(y) should return true
if and only if y.equals(x) returns true.

3. It is transitive: for any non-null reference values x, y, and z,
if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true.

4. It is consistent: for any non-null reference values x and y, multiple invocations of x.equals(y)
consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified.

5. For any non-null reference value x, x.equals(null) should return false.

6. The equals method for class Object implements the most discriminating possible equivalence relation on objects;
that is, for any non-null reference values x and y, this method returns true
if and only if x and y refer to the same object (x == y has the value true).

Note that it is generally necessary to override the hashCode method whenever this method is overridden,
so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.
----------------------------------------------------------------------------------------------------------

hashcode => https://www.baeldung.com/java-hashcode


